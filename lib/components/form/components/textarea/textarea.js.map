{"version":3,"sources":["../../../../../src/components/form/components/textarea/textarea.jsx"],"names":["Textarea","props","context","e","value","target","setState","text","updateFormState","name","initialState","initialiseComponent","state","error","passBackError","registerComponent","label","labelHtmlFor","hint","className","rest","onChange","Component","FormContext"],"mappings":"+yGAQqBA,CAAAA,Q,0BAsBnB,WAAYC,CAAZ,CAAmBC,CAAnB,CAA4B,8FACpBD,CADoB,CACbC,CADa,wDAYjB,SAAAC,CAAC,CAAI,IACNC,CAAAA,CADM,CACID,CAAC,CAACE,MADN,CACND,KADM,CAEd,EAAKE,QAAL,CAAc,CAAEC,IAAI,CAAEH,CAAR,CAAd,CAA+B,UAAM,IAC3BI,CAAAA,CAD2B,CACP,EAAKN,OADE,CAC3BM,eAD2B,CAE3BC,CAF2B,CAElB,EAAKR,KAFa,CAE3BQ,IAF2B,CAG/BD,CAH+B,EAIjCA,CAAe,CAACC,CAAD,CAAOL,CAAP,CAElB,CAND,CAOD,CArB2B,EAE1B,GAAMM,CAAAA,CAAY,CAAG,EAAKC,mBAAL,EAArB,CAF0B,MAG1B,GAAKC,KAAL,CAAaF,CAHa,EAI3B,C,mGAEoB,OACK,KAAKT,KADV,CACXQ,CADW,GACXA,IADW,CACLI,CADK,GACLA,KADK,CAEXC,CAFW,CAEO,KAAKZ,OAFZ,CAEXY,aAFW,CAGfA,CAHe,EAGAA,CAAa,CAACL,CAAD,CAAO,CAAC,CAACI,CAAT,CAAgBA,CAAhB,CACjC,C,iEAaqB,OACW,KAAKZ,KADhB,CACZQ,CADY,GACZA,IADY,CACNL,CADM,GACNA,KADM,CACCS,CADD,GACCA,KADD,GAEyB,KAAKX,OAF9B,CAEZa,CAFY,GAEZA,iBAFY,CAEOD,CAFP,GAEOA,aAFP,CAOpB,MAJIC,CAAAA,CAIJ,EAHEA,CAAiB,CAACN,CAAD,CAAOL,CAAP,CAGnB,CADIU,CACJ,EADmBA,CAAa,CAACL,CAAD,CAAO,CAAC,CAACI,CAAT,CAAgBA,CAAhB,CAChC,CAAO,CACLN,IAAI,CAAEH,CAAK,EAAI,EADV,CAGR,C,uCAEQ,OASH,KAAKH,KATF,CAELe,CAFK,GAELA,KAFK,CAGLC,CAHK,GAGLA,YAHK,CAILC,CAJK,GAILA,IAJK,CAKLL,CALK,GAKLA,KALK,CAMLM,CANK,GAMLA,SANK,CAOLf,CAPK,GAOLA,KAPK,CAQFgB,CARE,yFAUCb,CAVD,CAUU,KAAKK,KAVf,CAUCL,IAVD,CAWP,MACE,iEACGS,CAAK,CAAG,gCAAC,iBAAD,EAAO,OAAO,CAAEC,CAAhB,EAA+BD,CAA/B,CAAH,CAAmD,IAD3D,CAEGE,CAAI,CAAG,gCAAC,gBAAD,MAAOA,CAAP,CAAH,CAAyB,IAFhC,CAGGL,CAAK,CAAG,gCAAC,wBAAD,MAAeA,CAAf,CAAH,CAA0C,IAHlD,CAIE,qDACE,KAAK,CAAEN,CADT,CAEE,SAAS,CAAE,2BACT,gBADS,CAET,CAAE,wBAAyBM,CAA3B,CAFS,CAGTM,CAHS,CAFb,CAOE,QAAQ,CAAE,KAAKE,QAPjB,EAQMD,CARN,EAJF,CAgBH,C,OArFmCE,gB,8CAAjBtB,Q,eACEuB,uB,kBADFvB,Q,gBAaG,CACpBgB,KAAK,CAAE,EADa,CAEpBC,YAAY,CAAE,EAFM,CAGpBC,IAAI,CAAE,EAHc,CAIpBL,KAAK,CAAE,EAJa,CAKpBM,SAAS,CAAE,EALS,CAMpBf,KAAK,CAAE,EANa,C","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport FormContext from '../../FormContext';\nimport Label from '../../../label';\nimport Hint from '../../../hint';\nimport ErrorMessage from '../../../error-message';\n\nexport default class Textarea extends Component {\n  static contextType = FormContext;\n\n  static propTypes = {\n    label: PropTypes.string,\n    labelHtmlFor: PropTypes.string,\n    hint: PropTypes.string,\n    error: PropTypes.string,\n    className: PropTypes.string,\n    name: PropTypes.string.isRequired,\n    value: PropTypes.string\n  };\n\n  static defaultProps = {\n    label: '',\n    labelHtmlFor: '',\n    hint: '',\n    error: '',\n    className: '',\n    value: ''\n  };\n\n  constructor(props, context) {\n    super(props, context);\n    const initialState = this.initialiseComponent();\n    this.state = initialState;\n  }\n\n  componentDidUpdate() {\n    const { name, error } = this.props;\n    const { passBackError } = this.context;\n    if (passBackError) passBackError(name, !!error, error);\n  }\n\n  onChange = e => {\n    const { value } = e.target;\n    this.setState({ text: value }, () => {\n      const { updateFormState } = this.context;\n      const { name } = this.props;\n      if (updateFormState) {\n        updateFormState(name, value);\n      }\n    });\n  };\n\n  initialiseComponent() {\n    const { name, value, error } = this.props;\n    const { registerComponent, passBackError } = this.context;\n    if (registerComponent) {\n      registerComponent(name, value);\n    }\n    if (passBackError) passBackError(name, !!error, error);\n    return {\n      text: value || ''\n    };\n  }\n\n  render() {\n    const {\n      label,\n      labelHtmlFor,\n      hint,\n      error,\n      className,\n      value,\n      ...rest\n    } = this.props;\n    const { text } = this.state;\n    return (\n      <>\n        {label ? <Label htmlFor={labelHtmlFor}>{label}</Label> : null}\n        {hint ? <Hint>{hint}</Hint> : null}\n        {error ? <ErrorMessage>{error}</ErrorMessage> : null}\n        <textarea\n          value={text}\n          className={classNames(\n            'nhsuk-textarea',\n            { 'nhsuk-textarea--error': error },\n            className\n          )}\n          onChange={this.onChange}\n          {...rest}\n        />\n      </>\n    );\n  }\n}\n"],"file":"textarea.js"}