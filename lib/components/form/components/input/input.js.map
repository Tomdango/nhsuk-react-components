{"version":3,"sources":["../../../../../src/components/form/components/input/input.jsx"],"names":["Input","props","context","e","value","target","name","updateFormState","setState","state","initialiseComponent","error","passBackError","registerComponent","label","labelHtmlFor","hint","className","width","rest","handleInput","Component","initialvalue","FormContext"],"mappings":"+yGAQMA,CAAAA,K,0BA2BJ,WAAYC,CAAZ,CAAmBC,CAAnB,CAA4B,qGACpBD,CADoB,CACbC,CADa,2DAmBd,SAAAC,CAAC,CAAI,IACTC,CAAAA,CADS,CACCD,CAAC,CAACE,MADH,CACTD,KADS,CAETE,CAFS,CAEA,EAAKL,KAFL,CAETK,IAFS,CAGTC,CAHS,CAGW,EAAKL,OAHhB,CAGTK,eAHS,CAIbA,CAJa,EAKfA,CAAe,CAACD,CAAD,CAAOF,CAAP,CALA,CAOjB,EAAKI,QAAL,CAAc,CAAEJ,KAAK,CAALA,CAAF,CAAd,CACD,CA3B2B,EAE1B,EAAKK,KAAL,CAAa,CACXL,KAAK,CAAE,EADI,CAFa,CAK1B,EAAKM,mBAAL,EAL0B,EAM3B,C,iGAEmB,IACVN,CAAAA,CADU,CACA,KAAKH,KADL,CACVG,KADU,CAElB,KAAKI,QAAL,CAAc,CAAEJ,KAAK,CAALA,CAAF,CAAd,CACD,C,+DAEoB,OACK,KAAKH,KADV,CACXK,CADW,GACXA,IADW,CACLK,CADK,GACLA,KADK,CAEXC,CAFW,CAEO,KAAKV,OAFZ,CAEXU,aAFW,CAGfA,CAHe,EAGAA,CAAa,CAACN,CAAD,CAAO,CAAC,CAACK,CAAT,CAAgBA,CAAhB,CACjC,C,iEAYqB,OACyB,KAAKT,OAD9B,CACZW,CADY,GACZA,iBADY,CACOD,CADP,GACOA,aADP,GAEW,KAAKX,KAFhB,CAEZK,CAFY,GAEZA,IAFY,CAENF,CAFM,GAENA,KAFM,CAECO,CAFD,GAECA,KAFD,CAGhBE,CAHgB,EAIlBA,CAAiB,CAACP,CAAD,CAAOF,CAAP,CAJC,CAMhBQ,CANgB,EAMDA,CAAa,CAACN,CAAD,CAAO,CAAC,CAACK,CAAT,CAAgBA,CAAhB,CACjC,C,uCAEQ,SAUH,KAAKV,KAVF,CAELa,CAFK,GAELA,KAFK,CAGLC,CAHK,GAGLA,YAHK,CAILC,CAJK,GAILA,IAJK,CAKLL,CALK,GAKLA,KALK,CAMLM,CANK,GAMLA,SANK,CAOLC,CAPK,GAOLA,KAPK,CAQLZ,CARK,GAQLA,IARK,CASFa,CATE,gGAWCf,CAXD,CAWW,KAAKK,KAXhB,CAWCL,KAXD,CAYP,MACE,iCAAC,iBAAD,CAAO,QAAP,MACGU,CAAK,CAAG,gCAAC,iBAAD,EAAO,OAAO,CAAEC,CAAhB,EAA+BD,CAA/B,CAAH,CAAmD,IAD3D,CAEGE,CAAI,CAAG,gCAAC,gBAAD,MAAOA,CAAP,CAAH,CAAyB,IAFhC,CAGGL,CAAK,CAAG,gCAAC,wBAAD,MAAeA,CAAf,CAAH,CAA0C,IAHlD,CAIE,oDACMQ,CADN,EAEE,SAAS,CAAE,2BACT,aADS,CAET,CAAE,qBAAsBR,CAAxB,CAFS,sDAIgBO,CAJhB,EAI0BA,CAJ1B,gCAKPD,CALO,KAFb,CAUE,IAAI,CAAEX,CAVR,CAWE,IAAI,CAAC,MAXP,CAYE,KAAK,CAAEF,CAZT,CAaE,QAAQ,CAAE,KAAKgB,WAbjB,CAcE,6BAAqBd,CAArB,SAdF,GAJF,CAsBH,C,OApGiBe,gB,kBAAdrB,K,gBAakB,CACpBc,KAAK,CAAE,EADa,CAEpBC,YAAY,CAAE,EAFM,CAGpBC,IAAI,CAAE,EAHc,CAIpBL,KAAK,CAAE,EAJa,CAKpBM,SAAS,CAAE,EALS,CAMpBC,KAAK,OANe,CAOpBd,KAAK,CAAE,EAPa,CAQpBkB,YAAY,CAAE,EARM,CASpBhB,IAAI,CAAE,EATc,C,kBAblBN,K,eAyBiBuB,uB,eA8ERvB,K","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Label from '../../../label';\nimport Hint from '../../../hint';\nimport ErrorMessage from '../../../error-message';\nimport FormContext from '../../FormContext';\n\nclass Input extends Component {\n  static propTypes = {\n    label: PropTypes.string,\n    labelHtmlFor: PropTypes.string,\n    hint: PropTypes.string,\n    error: PropTypes.string,\n    className: PropTypes.string,\n    width: PropTypes.number,\n    value: PropTypes.string,\n    initialvalue: PropTypes.string,\n    name: PropTypes.string\n  };\n\n  static defaultProps = {\n    label: '',\n    labelHtmlFor: '',\n    hint: '',\n    error: '',\n    className: '',\n    width: undefined,\n    value: '',\n    initialvalue: '',\n    name: ''\n  };\n\n  static contextType = FormContext;\n\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      value: ''\n    };\n    this.initialiseComponent();\n  }\n\n  componentDidMount() {\n    const { value } = this.props;\n    this.setState({ value });\n  }\n\n  componentDidUpdate() {\n    const { name, error } = this.props;\n    const { passBackError } = this.context;\n    if (passBackError) passBackError(name, !!error, error);\n  }\n\n  handleInput = e => {\n    const { value } = e.target;\n    const { name } = this.props;\n    const { updateFormState } = this.context;\n    if (updateFormState) {\n      updateFormState(name, value);\n    }\n    this.setState({ value });\n  };\n\n  initialiseComponent() {\n    const { registerComponent, passBackError } = this.context;\n    const { name, value, error } = this.props;\n    if (registerComponent) {\n      registerComponent(name, value);\n    }\n    if (passBackError) passBackError(name, !!error, error);\n  }\n\n  render() {\n    const {\n      label,\n      labelHtmlFor,\n      hint,\n      error,\n      className,\n      width,\n      name,\n      ...rest\n    } = this.props;\n    const { value } = this.state;\n    return (\n      <React.Fragment>\n        {label ? <Label htmlFor={labelHtmlFor}>{label}</Label> : null}\n        {hint ? <Hint>{hint}</Hint> : null}\n        {error ? <ErrorMessage>{error}</ErrorMessage> : null}\n        <input\n          {...rest}\n          className={classNames(\n            'nhsuk-input',\n            { 'nhsuk-input--error': error },\n            {\n              [`nhsuk-input--width-${width}`]: width,\n              className\n            }\n          )}\n          name={name}\n          type=\"text\"\n          value={value}\n          onChange={this.handleInput}\n          aria-describedby={`${name}-hint`}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Input;\n"],"file":"input.js"}