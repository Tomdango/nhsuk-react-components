{"version":3,"sources":["../../../../../src/components/form/components/checkboxes/checkboxes.jsx"],"names":["Checkboxes","props","context","updateFormState","checkboxes","state","name","e","target","checked","value","onChange","includes","index","indexOf","splice","setState","_passValuesContext","children","id","React","Children","map","child","i","type","Box","cloneElement","error","registerComponent","passBackError","defaultCheckboxes","toArray","reduce","prevValue","push","label","labelHtmlFor","className","hint","rest","_handleClick","modifyChildren","Component","FormContext"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Box from './box';\nimport Label from '../../../label';\nimport Hint from '../../../hint';\nimport ErrorMessage from '../../../error-message';\nimport FormContext from '../../FormContext';\nimport CheckboxContext from './CheckboxContext';\n\nclass Checkboxes extends Component {\n  static Box = Box;\n\n  static contextType = FormContext;\n\n  static propTypes = {\n    children: PropTypes.node.isRequired,\n    name: PropTypes.string.isRequired,\n    error: PropTypes.string,\n    label: PropTypes.string,\n    labelHtmlFor: PropTypes.string,\n    className: PropTypes.string,\n    hint: PropTypes.string,\n    onChange: PropTypes.func,\n    id: PropTypes.string\n  };\n\n  static defaultProps = {\n    label: '',\n    labelHtmlFor: '',\n    error: '',\n    className: '',\n    hint: '',\n    onChange: () => {},\n    id: ''\n  };\n\n  constructor(props, context) {\n    super(props, context);\n    const { name, children, error } = props;\n    const { registerComponent, passBackError } = this.context;\n    const defaultCheckboxes = React.Children.toArray(children).reduce(\n      (prevValue, child) => {\n        if (child.type === Checkboxes.Box) {\n          const { checked, value } = child.props;\n          if (checked) prevValue.push(value);\n        }\n        return prevValue;\n      },\n      []\n    );\n    this.state = {\n      checkboxes: defaultCheckboxes\n    };\n    if (registerComponent) {\n      registerComponent(name, defaultCheckboxes);\n    }\n    if (passBackError) passBackError(name, !!error, error);\n  }\n\n  componentDidUpdate() {\n    const { name, error } = this.props;\n    const { passBackError } = this.context;\n    if (passBackError) passBackError(name, !!error, error);\n  }\n\n  _passValuesContext = () => {\n    const { updateFormState } = this.context;\n    if (updateFormState) {\n      const { checkboxes } = this.state;\n      const { name } = this.props;\n      updateFormState(name, checkboxes);\n    }\n  };\n\n  _handleClick = e => {\n    const { checked, value } = e.target;\n    const { checkboxes } = this.state;\n    const { onChange } = this.props;\n    if (checkboxes.includes(value) && !checked) {\n      const index = checkboxes.indexOf(value);\n      checkboxes.splice(index, 1);\n      this.setState({ checkboxes }, this._passValuesContext);\n    } else {\n      this.setState(\n        { checkboxes: [...checkboxes, value] },\n        this._passValuesContext\n      );\n    }\n    onChange(e);\n  };\n\n  modifyChildren = () => {\n    const { children, id } = this.props;\n    return React.Children.map(children, (child, i) => {\n      if (child === null) return child;\n      const { type } = child;\n      if (type === Checkboxes.Box) {\n        return React.cloneElement(child, {\n          id: `${id}-box-${i}`\n        });\n      }\n      return child;\n    });\n  };\n\n  render() {\n    const {\n      label,\n      labelHtmlFor,\n      className,\n      error,\n      hint,\n      children,\n      ...rest\n    } = this.props;\n\n    return (\n      <div {...rest} className={classNames('nhsuk-checkboxes', className)}>\n        {label ? <Label htmlFor={labelHtmlFor}>{label}</Label> : null}\n        {hint ? <Hint>{hint}</Hint> : null}\n        {error ? <ErrorMessage>{error}</ErrorMessage> : null}\n        <CheckboxContext.Provider value={{ onChange: this._handleClick }}>\n          {this.modifyChildren()}\n        </CheckboxContext.Provider>\n      </div>\n    );\n  }\n}\n\nexport default Checkboxes;\n"],"file":"checkboxes.js"}